// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = "filteredRelationCount"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              String         @id @default(uuid())
  email               String         @unique
  username            String         @unique
  name                String
  password            String
  birthday            DateTime
  location            String?
  bio                 String?
  gender              String?
  locked              Boolean        @default(false)
  role                Role           @default(USER)
  posts               Post[]
  reactions           Reaction[]
  rooms               RoomUser[]
  images              Image[]
  receivedFriendships Friendship[]   @relation(name: "friendshipRecipient")
  sentFriendships     Friendship[]   @relation(name: "friendshipSender")
  notifications       Notification[] @relation(name: "notificationRecipient")
  sentNotifications   Notification[] @relation(name: "notificationSender")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Post {
  postId        String         @id @default(uuid())
  authorId      String
  author        User?          @relation(fields: [authorId], references: [userId])
  body          String         @db.VarChar(360)
  isPublic      Boolean
  parentPostId  String?
  parentPost    Post?          @relation("PostToPost", fields: [parentPostId], references: [postId], onDelete: Cascade)
  childPosts    Post[]         @relation("PostToPost")
  reactions     Reaction[]
  images        Image[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Reaction {
  reactionId String       @id @default(uuid())
  postId     String
  userId     String
  type       ReactionType
  post       Post?        @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user       User?        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([postId, userId])
}

model Image {
  imageId   String    @id @default(uuid())
  url       String    @unique
  type      ImageType
  userId    String?
  postId    String?
  user      User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post      Post?     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Room {
  roomId        String         @id @default(uuid())
  title         String
  roomUsers     RoomUser[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RoomUser {
  roomUserId String    @id @default(uuid())
  roomId     String
  userId     String
  isOwner    Boolean
  leftRoom   DateTime?
  room       Room?     @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  user       User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([roomId, userId])
}

model Message {
  messageId  String    @id @default(uuid())
  body       String    @db.VarChar(360)
  roomUserId String
  roomUser   RoomUser? @relation(fields: [roomUserId], references: [roomUserId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Notification {
  notificationId String           @id @default(uuid())
  type           NotificationType
  recipientId    String
  recipient      User?            @relation(name: "notificationRecipient", fields: [recipientId], references: [userId])
  senderId       String
  sender         User?            @relation(name: "notificationSender", fields: [senderId], references: [userId])
  postId         String?
  post           Post?            @relation(fields: [postId], references: [postId])
  roomId         String?
  room           Room?            @relation(fields: [roomId], references: [roomId])
  read           Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Friendship {
  friendshipId String           @id @default(uuid())
  recipientId  String
  recipient    User?            @relation(name: "friendshipRecipient", fields: [recipientId], references: [userId])
  senderId     String
  sender       User?            @relation(name: "friendshipSender", fields: [senderId], references: [userId])
  status       FriendshipStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([recipientId, senderId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

enum NotificationType {
  LIKE
  REPLY
  MESSAGE
}

enum Role {
  USER
  ADMIN
}

enum ReactionType {
  LIKE
  DISLIKE
}

enum ImageType {
  USER_AVATAR
  USER_BANNER
  POST
}
